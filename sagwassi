#!/bin/bash
### Usage: sagwassi [<option>*]
###
### where <option> is one of:
###   ansible_extra_vars=<csv> Run ansible with extra vars in <csv>, where one entry is key#value
###                            Example: ansible_extra_vars=project_dir#/tmp/sagwassi,home#/home/sagwassi
###   ansible_flags=<csv>      Run ansible with flags in <csv>
###                            Example: ansible_flags=--step,--version
###                            Default: ansible_flags=--ask-become-pass,-vv
###   ansible_skip_tags=<csv>  Make ansible skip tasks that are marked with tags contained in <csv>
###                            Example: ansible_skip_tags=debug,sagwassi
###   ansible_tags=<csv>       Make ansible only run tasks that are marked with tags contained in <csv>
###                            Example: ansible_tags=debug,sagwassi
###   git_branch=<branch>      Set remote git branch of sagwassi to <branch>
###   git_url=<url>            Set remote git repository of sagwassi to <url>
###   sagwassi_dir=<path>      Set the base dir of sagwassi to <path>
###   sagwassi_mode=local      Do not pull latest sagwassi updates from repository
###   sagwassi_reinstall=true  Remove existing installation and reinstall sagwassi
###   sagwassi_sh=<path>       Use sagwassi script from <path> if sagwassi must restart itself
###   ssh_key=<path>           Use SSH key from <path>
###   user=<name>              Run as user <name>

set -e

help() {
  awk -F'### ' '/^###/ { print $2 }' "$0"
}

if [[ "$1" == "-h" ]]; then
  help "$@"
  exit 0
fi

all_args=${all_args:-$@}

if [[ "$(uname)" == "Darwin" ]]; then
  os_darwin=true
fi

if [ "$os_darwin" ] && ! xcode-select -v >/dev/null 2>/dev/null; then
  echo "installing xcode commandline tools ..."
  xcode-select --install 2>/dev/null || true
fi

if [ "$os_darwin" ] ; then
  export PATH=/usr/local/bin:$PATH
  if ! brew -h >/dev/null 2>/dev/null; then
    echo "installing homebrew ..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
  fi
fi

if ! git help >/dev/null 2>/dev/null; then
  echo "installing git ..."
  if [ "$os_darwin" ]; then
    brew install git
  else
    sudo apt-get install git
  fi
fi

if ! ansible -h >/dev/null 2>/dev/null; then
  if [ -n "$os_darwin" ]; then
    brew install ansible
  else
    sudo apt-get update && sudo apt-get install ansible
  fi
else
  if [ -n "$os_darwin" ]; then
    HOMEBREW_NO_AUTO_UPDATE=1 brew upgrade ansible
  else
    sudo apt-get upgrade ansible
  fi
fi

# gather python facts
if python -h >/dev/null 2>/dev/null; then
  ansible_python_interpreter=$(command -v python)
fi
# prefer python3
if python3 -h >/dev/null 2>/dev/null; then
  ansible_python_interpreter=$(command -v python3)
fi

if [ -n "$os_darwin" ]; then
  if ! jq -h >/dev/null 2>/dev/null; then
    brew install jq
  fi
fi

# parse command line arguments
for ARGUMENT in $all_args; do

  KEY=$(echo "$ARGUMENT" | cut -f1 -d=)
  VALUE=$(echo "$ARGUMENT" | cut -f2 -d=)

  case "$KEY" in
  sagwassi_dir) sagwassi_dir=${VALUE} ;;
  sagwassi_mode) sagwassi_mode=${VALUE} ;;
  sagwassi_reinstall) sagwassi_reinstall=${VALUE} ;;
  sagwassi_sh) sagwassi_sh=${VALUE} ;;
  ansible_extra_vars) ansible_extra_vars=${VALUE} ;;
  ansible_flags) ansible_flags=${VALUE} ;;
  ansible_skip_tags) ansible_skip_tags=${VALUE} ;;
  ansible_tags) ansible_tags=${VALUE} ;;
  git_url) git_url=${VALUE} ;;
  git_branch) git_branch=${VALUE} ;;
  ssh_key) ssh_key=${VALUE} ;;
  user) user=${VALUE} ;;
  *) ;;
  esac
done

sagwassi_dir=${sagwassi_dir:-$HOME/.sagwassi}
sagwassi_properties="$sagwassi_dir/sagwassi.properties"

# read from sagwassi.properties
if [ -f "$sagwassi_properties" ] && [ -z ${sagwassi_reinstall+x} ]; then # ignore SC2154
  while read -r LINE; do
    KEY=$(echo "$LINE" | cut -f1 -d=)
    VALUE=$(echo "$LINE" | cut -f2 -d=)

    case "$KEY" in
    ansible_extra_vars) ansible_extra_vars=${ansible_extra_vars:-$VALUE} ;;
    ansible_flags) ansible_flags=${ansible_flags:-$VALUE} ;;
    ansible_skip_tags) ansible_skip_tags=${ansible_skip_tags:-$VALUE} ;;
    ansible_tags) ansible_tags=${ansible_tags:-$VALUE} ;;
    git_url) git_url=${git_url:-$VALUE} ;;
    git_branch) git_branch=${git_branch:-$VALUE} ;;
    ssh_key) ssh_key=${ssh_key:-$VALUE} ;;
    user) user=${user:-$VALUE} ;;
    *) ;;
    esac
  done <"$sagwassi_properties"
else # reinstall sagwassi
  mv "$sagwassi_dir" "/tmp/sagwassi_delete_me_$(base64 </dev/urandom | tr -dc 'a-zA-Z0-9' | head -c20)" 2>/dev/null || true
  echo "Reinstalling sagwassi ..."
fi

# ensure at least default values
user=${user:-$USER}
sagwassi_sh=${sagwassi_sh:-"$0"}
ansible_flags=${ansible_flags:-"--ask-become-pass,-vv"}
ansible_tags=${ansible_tags:-all}

# ssh setup for git
ssh_status=0
ssh-add -l &>/dev/null || ssh_status="$?"
if [ "$ssh_status" -eq 2 ] && [ -z ${ssh_agent_subprocess+x} ] && # ignore SC2154
  eval "$(ssh-agent -s)" && ssh_status="$?" && [ "$ssh_status" -gt 0 ]; then  
  echo "Starting ssh-agent"
  exec /usr/bin/ssh-agent "$sagwassi_sh" "$all_args" "ssh_agent_subprocess=true"
else
  [ "$ssh_status" -gt 0 ] && ssh-add ${ssh_key:+"$ssh_key"} && ssh_status="$?"

  # ensure vars via prompt
  if [ -z ${git_url+x} ]; then
    read -rp 'sagwassi git url (default: https://github.com/lomin/sagwassi.git): ' git_url
    git_url=${git_url:-https://github.com/lomin/sagwassi.git}
  fi

  if [ -z ${git_branch+x} ]; then
    read -rp 'sagwassi git branch (default: master): ' git_branch
    git_branch=${git_branch:-master}
  fi

  # clone sagwassi if not already there and save git vars
  if [ ! -f "$sagwassi_properties" ]; then
    git clone "$git_url" "$sagwassi_dir"
    {
      echo ansible_extra_vars="$ansible_extra_vars"
      echo ansible_flags="$ansible_flags"
      echo ansible_skip_tags="$ansible_skip_tags"
      echo ansible_tags="$ansible_tags"
      echo git_url="$git_url"
      echo git_branch="$git_branch"
      echo ssh_key="$ssh_key"
      echo user="$user"
    } > "$sagwassi_properties"
  fi

  if [ "$sagwassi_mode" = local ]; then
    echo sagwassi is in local mode
  else
    git -C "$sagwassi_dir" fetch
    git -C "$sagwassi_dir" checkout "$git_branch"
    git -C "$sagwassi_dir" pull
  fi
  if [ -n "$ansible_extra_vars" ]; then
    ansible_extra_vars=$(echo "$ansible_extra_vars" | tr \# "=" | tr , " ")
    all_args="$ansible_extra_vars $all_args"
  fi
  read -ra ansible_flags_array < <(echo "$ansible_flags" | tr , " ")
  (cd "$sagwassi_dir" && exec ansible-playbook "${ansible_flags_array[@]}" -i "$sagwassi_dir/hosts.yml" "$sagwassi_dir/site.yml" --extra-vars "$all_args sagwassi_dir=$sagwassi_dir sagwassi_sh=$sagwassi_sh user=$user ansible_python_interpreter=$ansible_python_interpreter" --tags="$ansible_tags" --skip-tags="$ansible_skip_tags")
fi

